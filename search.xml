<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Javascript中call、apply、bind的用法</title>
      <link href="/2019/09/18/Javascript%E4%B8%ADcall%E3%80%81apply%E3%80%81bind%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2019/09/18/Javascript%E4%B8%ADcall%E3%80%81apply%E3%80%81bind%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>call、apply、bind方法都是把函数临时赋值到对象上并执行（改变this指向）。</p><a id="more"></a><p>先看明白下面：<br>例一：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"小王"</span>， age = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"小张"</span>，</span><br><span class="line">    objAge: <span class="keyword">this</span>.age;</span><br><span class="line">    myFun: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"年龄"</span> + <span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.objAge; <span class="comment">// 17</span></span><br><span class="line">obj.myFun(); <span class="comment">// 小张年龄 undefined</span></span><br></pre></td></tr></table></figure><p>例二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fav = <span class="string">"盲僧"</span>；</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shows</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.fav);</span><br><span class="line">&#125;</span><br><span class="line">shows(); <span class="comment">// 盲僧</span></span><br></pre></td></tr></table></figure><p>上述两个例子的this，第一个打印里面的this指向obj，第二个全局声明的shows()函数this是windows。</p><h2 id="call-、apply-、bind-都是用来重定义-this-这个对象的！"><a href="#call-、apply-、bind-都是用来重定义-this-这个对象的！" class="headerlink" title="call()、apply()、bind() 都是用来重定义 this 这个对象的！"></a>call()、apply()、bind() 都是用来重定义 this 这个对象的！</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"小王"</span>， age = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"小张"</span>，</span><br><span class="line">    objAge: <span class="keyword">this</span>.age，</span><br><span class="line">    myFun: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"年龄"</span> + <span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> db = &#123;</span><br><span class="line">    name: <span class="string">"德玛"</span>，</span><br><span class="line">    age: <span class="number">99</span></span><br><span class="line">&#125;</span><br><span class="line">obj.myFun.call(db); <span class="comment">//德玛年龄 99</span></span><br><span class="line">obj.myFun.apply(db); <span class="comment">//德玛年龄 99</span></span><br><span class="line">obj.muFun.bind(db)(); <span class="comment">//德玛年龄 99</span></span><br></pre></td></tr></table></figure><p>以上出了 bind 方法后面多了个 () 外 ，结果返回都一致！</p><p><strong>由此得出结论，bind 返回的是一个新的函数，你必须调用它才会被执行。</strong></p><h2 id="对比call、bind、apply传参情况"><a href="#对比call、bind、apply传参情况" class="headerlink" title="对比call、bind、apply传参情况"></a>对比call、bind、apply传参情况</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"小王"</span>， age = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"小张"</span>，</span><br><span class="line">    objAge: <span class="keyword">this</span>.age，</span><br><span class="line">    myFun: <span class="function"><span class="keyword">function</span> (<span class="params">from， to</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`</span></span><br><span class="line"><span class="string">            <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>年龄: <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span> 来自<span class="subst">$&#123;<span class="keyword">from</span>&#125;</span>去往<span class="subst">$&#123;to&#125;</span></span></span><br><span class="line"><span class="string">        `</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> db = &#123;</span><br><span class="line">    name: <span class="string">"德玛"</span>，</span><br><span class="line">    age: <span class="number">99</span></span><br><span class="line">&#125;</span><br><span class="line">obj.myFun.call(db,<span class="string">'成都'</span>,<span class="string">'上海'</span>)； </span><br><span class="line"><span class="comment">// 德玛 年龄 99  来自 成都去往上海</span></span><br><span class="line">obj.myFun.apply(db,[<span class="string">'成都'</span>,<span class="string">'上海'</span>])； </span><br><span class="line"><span class="comment">// 德玛 年龄 99  来自 成都去往上海  </span></span><br><span class="line">obj.myFun.bind(db,<span class="string">'成都'</span>,<span class="string">'上海'</span>)()； </span><br><span class="line"><span class="comment">// 德玛 年龄 99  来自 成都去往上海</span></span><br><span class="line">obj.myFun.bind(db,[<span class="string">'成都'</span>,<span class="string">'上海'</span>])()；</span><br><span class="line"><span class="comment">// 德玛 年龄 99  来自 成都, 上海去往 undefined</span></span><br></pre></td></tr></table></figure><p>从上面四个结果不难看出:</p><p>call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了：</p><p>call 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 <code>obj.myFun.call(db,&#39;成都&#39;, ... ,&#39;string&#39; )</code>。</p><p>apply 的所有参数都必须放在一个数组里面传进去 <code>obj.myFun.apply(db,[&#39;成都&#39;, ..., &#39;string&#39; ])</code>。</p><p>bind 除了返回是函数以外，它 的参数和 call 一样。</p><p>当然，三者的参数不限定是 string 类型，允许是各种类型，包括函数 、 object 等等！</p><pre><code>原文地址：https://www.cnblogs.com/Shd-Study/p/6560808.html</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag>  JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动封装ajax请求兼容性写法</title>
      <link href="/2019/09/17/%E6%89%8B%E5%8A%A8%E5%B0%81%E8%A3%85ajax%E8%AF%B7%E6%B1%82%E5%85%BC%E5%AE%B9%E6%80%A7%E5%86%99%E6%B3%95/"/>
      <url>/2019/09/17/%E6%89%8B%E5%8A%A8%E5%B0%81%E8%A3%85ajax%E8%AF%B7%E6%B1%82%E5%85%BC%E5%AE%B9%E6%80%A7%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Ajax"><a href="#什么是Ajax" class="headerlink" title="什么是Ajax"></a>什么是Ajax</h2><ul><li>AJAX = 异步 JavaScript 和 XML。</li><li>AJAX 是一种用于创建快速动态网页的技术。</li><li>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。<a id="more"></a></li></ul><h2 id="如何封装"><a href="#如何封装" class="headerlink" title="如何封装"></a>如何封装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化HTTP请求参数（请求方式，地址，回调函数，请求数据，同步异步）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">method, url, callback, data, flag</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xml = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 兼容性写法</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpReauest)&#123;</span><br><span class="line">        <span class="comment">// 创建ajax对象（试用火狐谷歌IE7及以上）</span></span><br><span class="line">        xml = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 兼容IE6及以下</span></span><br><span class="line">        xml = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHttp"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将请求方式转换成大写</span></span><br><span class="line">    method = method.toUpperCase();</span><br><span class="line">    <span class="comment">// 判断请求方式</span></span><br><span class="line">    <span class="keyword">if</span>(method == <span class="string">"GET"</span>)&#123;</span><br><span class="line">        <span class="comment">//定义一个时间戳，避免每次请求地址一样</span></span><br><span class="line">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        timer = date.getTime();</span><br><span class="line">        <span class="comment">// 初始化HTTP请求参数(请求方式,地址+参数,同步异步)</span></span><br><span class="line">        xml.open(method, url + <span class="string">"?"</span> + data+ <span class="string">"$timer="</span> + timer, flag);</span><br><span class="line">        xml.send();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method == <span class="string">"POST"</span>)&#123;</span><br><span class="line">        xml.open(method, url, flag);</span><br><span class="line">        <span class="comment">// post传值需要规定请求头（设置内容类型）</span></span><br><span class="line">        xml.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">        xml.send(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听数据</span></span><br><span class="line">    xml.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xml.readyState);</span><br><span class="line">        <span class="comment">//readyState的五种状态</span></span><br><span class="line">        <span class="comment">// 0 - （未初始化）还没有调用send()方法</span></span><br><span class="line">        <span class="comment">// 1 - （载入）已调用send()方法，正在发送请求</span></span><br><span class="line">        <span class="comment">// 2 - （载入完成）send()方法执行完成，已经接收到全部响应内容</span></span><br><span class="line">        <span class="comment">// 3 - （交互）正在解析响应内容</span></span><br><span class="line">        <span class="comment">// 4 - （完成）响应内容解析完成，可以在客户端调用了</span></span><br><span class="line">        <span class="keyword">if</span>(xml.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="comment">//检查数据Http状态码：</span></span><br><span class="line">            <span class="comment">//100:信息类，表示web浏览器请求，正在进一步处理中</span></span><br><span class="line">            <span class="comment">//200:成功，表示用户请求被正确接收正在进步一的处理中</span></span><br><span class="line">            <span class="comment">//300:表示请求没有成功，客户端必须采取进一步的操作</span></span><br><span class="line">            <span class="comment">//400:客户端错误，表示客户端提交的请求有错误，如404</span></span><br><span class="line">            <span class="comment">//500:服务器错误，表示服务器不能完成对请求的处理</span></span><br><span class="line">            <span class="comment">//若是为200时，说明数据成功，调用回调函数处理数据，可以通过其他状态码拓展失败的回调函数</span></span><br><span class="line">            <span class="keyword">if</span>(xml.status == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">// 将请求到的内容作为参数传给回调函数并执行</span></span><br><span class="line">                callback(xml.responseText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用封装的Ajax"><a href="#使用封装的Ajax" class="headerlink" title="使用封装的Ajax"></a>使用封装的Ajax</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 先引入封装好的Ajax文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./ajax.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> cpage = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">   <span class="comment">//通过GET调用ajax方法</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">//请求方式、路径、回调函数、传值、是否异步</span></span></span><br><span class="line"><span class="javascript">   ajax(<span class="string">'GET'</span>, <span class="string">'getPics.php'</span>, dealData, <span class="string">"cpage="</span> + cpage, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">   <span class="comment">//定义一个回调函数</span></span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="keyword">function</span> <span class="title">callBack</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="comment">//将获取到的json格式字符串转换成json格式</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(data);</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(data);</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>需要注意的是，<code>ajax</code>接收到的值是<code>JSON</code>格式的字符串，需要转换成 <code>JSON</code> 格式才可以当对象来使用</li></ul><h2 id="JSON格式转换"><a href="#JSON格式转换" class="headerlink" title="JSON格式转换"></a>JSON格式转换</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;<span class="string">"name"</span>: <span class="string">"小明"</span>,<span class="string">"age"</span>: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="comment">// 将json格式转换成字符串</span></span><br><span class="line"><span class="keyword">var</span> strData = <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line"><span class="comment">// 得到："&#123;"name": "小明","age": 18&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将strData转换成json</span></span><br><span class="line"><span class="keyword">var</span> jsonData = <span class="built_in">JSON</span>.parse(strData);</span><br><span class="line"><span class="comment">// 得到：&#123;name: "小明", age: 18&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
          <category> ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag>  ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2019/09/09/%E9%97%AD%E5%8C%85/"/>
      <url>/2019/09/09/%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>闭包是由函数以及创建该函数的语法环境组成而成。这个环境包含了这个闭包创建时所能访问的所有局部变量。</p><h4 id="闭包的三要素："><a href="#闭包的三要素：" class="headerlink" title="闭包的三要素："></a>闭包的三要素：</h4><ol><li>嵌套结构的函数</li><li>内部函数访问了外部函数的变量</li><li>在外部函数的外面调用了内部函数<a id="more"></a></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fe = fn();</span><br><span class="line">fe(); <span class="comment">// 2</span></span><br><span class="line">fe(); <span class="comment">// 3</span></span><br><span class="line">fe(); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>上面函数通过return，在外部函数调用内部函数，当然也可以通过其他方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fe;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">    fe = <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line">fe(); <span class="comment">// 2</span></span><br><span class="line">fe(); <span class="comment">// 3</span></span><br><span class="line">fe(); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>上面函数通过全局变量的方法访问到了fe，所以只要外部函数的外面调用了内部函数，就可以实现闭包。</p><h4 id="每次执行都会创建一个独立的闭包对象"><a href="#每次执行都会创建一个独立的闭包对象" class="headerlink" title="每次执行都会创建一个独立的闭包对象"></a>每次执行都会创建一个独立的闭包对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fe1 = fn();</span><br><span class="line"><span class="keyword">var</span> fe2 = fn()</span><br><span class="line">fe1(); <span class="comment">// 2</span></span><br><span class="line">fe1(); <span class="comment">// 3</span></span><br><span class="line">fe1(); <span class="comment">// 4</span></span><br><span class="line">fe2(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>上面代码通过执行fn创建了两个闭包</p><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><ol><li>在循环体创建闭包</li><li>使用多个闭包</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">showID</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'li:'</span> + id)</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">setClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ary = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; ary.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">            ary[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line">                showID(i+1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    setClick();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码，点击任意一个li都会打印出来5。<br><strong>怎么解决？</strong></p><ol><li><p>可以通过闭包工厂创建独立的闭包对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">showID</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'li:'</span> + id)</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">clickMake</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line">            showID(id)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">setClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ary = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; ary.length; i++)&#123;</span></span><br><span class="line">            ary[i].onclick = clickMake(i+1)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    setClick();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>也可以通过立即执行函数解决</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">showID</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'li:'</span> + id)</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">setClick</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ary = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ary.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                ary[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                showID(i+1);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;)()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    setClick();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>ES6新增了let命令，我们可以直接用let定义一个局部变量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">showID</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'li:'</span> + id)</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">setClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ary = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; ary.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">            ary[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line">                showID(i+1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    setClick();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 闭包 </category>
          
      </categories>
      
      
        <tags>
            
            <tag>  JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客的搭建（三）</title>
      <link href="/2019/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2019/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>博客如何搭建以及常用的API，前两篇我已经介绍过了，关于主题的个性化配置网络上一搜一大堆文章，我就不细说了，本文主要记录了博主在搭建博客踩的坑以及解决方法。</p><a id="more"></a><h6 id="1-在主题个性化配置的时候，网络上有很多修改CSS样式的文章，文章里经常把要更改的样式写在某一个具体的文件内，有一些文件本地根本找不到（可能是因为hexo版本更新的原因）。"><a href="#1-在主题个性化配置的时候，网络上有很多修改CSS样式的文章，文章里经常把要更改的样式写在某一个具体的文件内，有一些文件本地根本找不到（可能是因为hexo版本更新的原因）。" class="headerlink" title="1. 在主题个性化配置的时候，网络上有很多修改CSS样式的文章，文章里经常把要更改的样式写在某一个具体的文件内，有一些文件本地根本找不到（可能是因为hexo版本更新的原因）。"></a>1. 在主题个性化配置的时候，网络上有很多修改CSS样式的文章，文章里经常把要更改的样式写在某一个具体的文件内，有一些文件本地根本找不到（可能是因为<code>hexo</code>版本更新的原因）。</h6><p><strong>解决办法:</strong><br>可以通过在主题样式的根目录里面添加CSS样式。<br>例如：我使用的是<code>next-Pisces</code>主题样式，可以直接在<code>hemes\next\source\css\_mixins\Pisces.styl</code>文件中直接添加CSS样式。</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加网页背景图片</span></span><br><span class="line"><span class="selector-tag">html</span> <span class="selector-tag">body</span> &#123;</span><br><span class="line">    background:url(https://source.unsplash.com/random/1600x900);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-size</span>:cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-通过hexo-serve进行本地预览，经常有些样式并没有生效，或者通过hexo-deploy上传之后再打开有些样式或者文章无法正常显示。"><a href="#2-通过hexo-serve进行本地预览，经常有些样式并没有生效，或者通过hexo-deploy上传之后再打开有些样式或者文章无法正常显示。" class="headerlink" title="2. 通过hexo serve进行本地预览，经常有些样式并没有生效，或者通过hexo deploy上传之后再打开有些样式或者文章无法正常显示。"></a>2. 通过<code>hexo serve</code>进行本地预览，经常有些样式并没有生效，或者通过<code>hexo deploy</code>上传之后再打开有些样式或者文章无法正常显示。</h6><p><strong>解决办法:</strong><br>可以通过<code>hexo clean</code>，清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><h6 id="3-当通过npm安装了一些插件之后，再进行博客本地预览，hexo报错Plugin-load-failed或者no-such-file-or-directory，提醒我们需要重新通过npm下载插件。"><a href="#3-当通过npm安装了一些插件之后，再进行博客本地预览，hexo报错Plugin-load-failed或者no-such-file-or-directory，提醒我们需要重新通过npm下载插件。" class="headerlink" title="3. 当通过npm安装了一些插件之后，再进行博客本地预览，hexo报错Plugin load failed或者no such file or directory，提醒我们需要重新通过npm下载插件。"></a>3. 当通过npm安装了一些插件之后，再进行博客本地预览，hexo报错<code>Plugin load failed</code>或者<code>no such file or directory</code>，提醒我们需要重新通过npm下载插件。</h6><p><strong>解决办法:</strong><br>因为国内使用npm下载插件是非常慢的，所以我们经常使用cnpm（淘宝镜像）进行下载，需要注意的是当你混用npm和cnpm的时候，本地cnpm下载的插件会被自动删除掉，所以会导致报错插件加载失败，（尽量不要混用）重新下载即可。</p><h6 id="4-博客添加本地搜索插件之后，页面层次混乱，搜索框无法正常显示。"><a href="#4-博客添加本地搜索插件之后，页面层次混乱，搜索框无法正常显示。" class="headerlink" title="4. 博客添加本地搜索插件之后，页面层次混乱，搜索框无法正常显示。"></a>4. 博客添加本地搜索插件之后，页面层次混乱，搜索框无法正常显示。</h6><p><strong>解决办法:</strong><br>博主在搭建本地搜索框的时候，发现搜索框显示在文章主体后，调整<code>z-index</code>也无法正常显示，最后发现是因为我给主体设置了<code>opacity</code>属性。<code>opacity</code>属性默认会改变子元素的透明度，所以会导致页面层次混乱。<br>我们可以改用<code>background-color: rgba(255, 255, 255, 0.8)</code>改变透明度。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag>  Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客的搭建（二）</title>
      <link href="/2019/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2019/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>使用了一段时间的<code>hexo</code>，下面是我整理出来一些常用的<code>hexo</code>指令。</p><a id="more"></a><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p><code>Front-matter</code>是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 博客的搭建（一）</span><br><span class="line">date: 2019-08-23 22:14:57</span><br><span class="line">tags: [" Hexo"]</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">  - </span>[博客搭建, Hexo]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="center"><code>layout</code></td><td align="center">布局</td><td align="left"></td></tr><tr><td align="center"><code>title</code></td><td align="center">标题</td><td align="left"></td></tr><tr><td align="center"><code>date</code></td><td align="center">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="center"><code>updated</code></td><td align="center">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="center"><code>comments</code></td><td align="center">开启文章的评论功能</td><td align="left">true</td></tr><tr><td align="center"><code>tags</code></td><td align="center">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="center"><code>categories</code></td><td align="center">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="center"><code>permalink</code></td><td align="center">覆盖文章网址</td><td align="left"></td></tr><tr><td align="center"><code>keywords</code></td><td align="center">仅用于 <code>meta</code> 标签和 <code>Open Graph</code> 的关键词</td><td align="left">（不推荐使用）</td></tr></tbody></table><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>在新建文章时，<code>Hexo</code> 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，可以在<code>scaffolds</code> 文件夹中的相应文件修改模板。</p><h2 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h2><p>只有文章支持分类和标签，可以在 <code>Front-matter</code> 中设置。<br>在其他系统中，分类和标签听起来很接近，但是在 <code>Hexo</code> 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="init：新建一个网站"><a href="#init：新建一个网站" class="headerlink" title="init：新建一个网站"></a>init：新建一个网站</h3><pre><code>$ hexo init [folder]</code></pre><p>如果没有设置 <code>folder</code> ，<code>Hexo</code> 默认在目前的文件夹建立网站。</p><h3 id="new：新建一篇文章"><a href="#new：新建一篇文章" class="headerlink" title="new：新建一篇文章"></a>new：新建一篇文章</h3><pre><code>$ hexo new [layout] &lt;title&gt;</code></pre><p>如果没有设置 <code>layout</code> 的话，默认使用 <code>_config.yml</code> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。<br>    $ hexo new “post title with whitespace”</p><h3 id="generate：生成静态文件"><a href="#generate：生成静态文件" class="headerlink" title="generate：生成静态文件"></a>generate：生成静态文件</h3><pre><code>$ hexo generate</code></pre><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-d</code>, <code>--deploy</code></td><td>文件生成后立即部署网站</td></tr><tr><td><code>-w</code>, <code>--watch</code></td><td>监视文件变动</td></tr><tr><td><code>-b</code>, <code>--bail</code></td><td>生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td><code>-f</code>, <code>--force</code></td><td>强制重新生成文件<code>Hexo</code>引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。使用该参数的效果接近 <code>hexo clean</code> &amp;&amp; <code>hexo generate</code></td></tr></tbody></table><p>该命令可以简写为</p><pre><code>$ hexo g</code></pre><h3 id="server：启动服务器"><a href="#server：启动服务器" class="headerlink" title="server：启动服务器"></a>server：启动服务器</h3><pre><code>$ hexo serve</code></pre><p>默认情况下，访问网址为：<code>http://localhost:4000/</code>。</p><h3 id="deploy：部署网站"><a href="#deploy：部署网站" class="headerlink" title="deploy：部署网站"></a>deploy：部署网站</h3><pre><code>$ hexo deploy</code></pre><p>注意：部署之前需要先生成静态文件<code>hexo generat</code></p><h3 id="clean：清除缓存文件"><a href="#clean：清除缓存文件" class="headerlink" title="clean：清除缓存文件"></a>clean：清除缓存文件</h3><pre><code>$ hexo clean</code></pre><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。<br>注意：在某些情况（尤其是更换主题后），如果发现对站点的更改无论如何也不生效，可能需要运行该命令。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag>  Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set数据结构</title>
      <link href="/2019/09/07/Set%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2019/09/07/Set%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>ES6提供了新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set本身是一个构造器，可以通过new来生成Set数据结构</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="comment">// 通过add()向Set结构加入成员</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].forEach(<span class="function"><span class="params">x</span> =&gt;</span> s.add(x));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">for</span> s)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 3 4</span></span><br></pre></td></tr></table></figure><h3 id="Set函数可以接受一个数组，用来初始化"><a href="#Set函数可以接受一个数组，用来初始化" class="headerlink" title="Set函数可以接受一个数组，用来初始化"></a>Set函数可以接受一个数组，用来初始化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([1,2,3,1,2,3]);</span><br><span class="line">[...<span class="keyword">set</span>]</span><br><span class="line">// [1, 2, 3]</span><br><span class="line"></span><br><span class="line">// 例二</span><br><span class="line">const items = new Set([1,2,3,4,5,5,5,5]);</span><br><span class="line">items.size</span><br><span class="line">// 5</span><br></pre></td></tr></table></figure><p>可以通过Set的特性进行数组去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去除数组的重复成员</span></span><br><span class="line">[...new <span class="built_in">Set</span>(array)]</span><br></pre></td></tr></table></figure><p>也可以用于去除字符串里重复的字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[...new <span class="built_in">Set</span>(<span class="string">'ababbc'</span>)].join(<span class="string">''</span>)</span><br><span class="line"><span class="comment">// "abc"</span></span><br></pre></td></tr></table></figure><p>向 Set 加入值的时候，不会发生类型转换，所以5和”5”是两个不同的值。<br>但是Set内部认为NaN是相等的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set();</span><br><span class="line">let a = NaN;</span><br><span class="line">let b = NaN;</span><br><span class="line"><span class="keyword">set</span>.add(a);</span><br><span class="line"><span class="keyword">set</span>.add(b);</span><br><span class="line"><span class="keyword">set</span> // Set &#123;<span class="literal">NaN</span>&#125;</span><br></pre></td></tr></table></figure><p>另外，两个对象总是不相等的，即使是两个空对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set();</span><br><span class="line"><span class="keyword">set</span>.add(&#123;&#125;);</span><br><span class="line"><span class="keyword">set</span>.size // 1</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>.add(&#123;&#125;);</span><br><span class="line"><span class="keyword">set</span>.size // 2</span><br></pre></td></tr></table></figure><h3 id="Set实例的属性方法"><a href="#Set实例的属性方法" class="headerlink" title="Set实例的属性方法"></a>Set实例的属性方法</h3><ol><li>Set.prototype.add(value)：添加某个值，返回 Set 结构本身。</li><li>Set.prototype.delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</li><li>Set.prototype.has(value)：返回一个布尔值，表示该值是否为Set的成员。</li><li>Set.prototype.clear()：清除所有成员，没有返回值。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s.add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 注意2被加入了两次</span></span><br><span class="line"></span><br><span class="line">s.size <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">s.has(<span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line">s.has(<span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line">s.has(<span class="number">3</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">s.delete(<span class="number">2</span>);</span><br><span class="line">s.has(<span class="number">2</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="Array-from方法可以将-Set-结构转为数组。"><a href="#Array-from方法可以将-Set-结构转为数组。" class="headerlink" title="Array.from方法可以将 Set 结构转为数组。"></a>Array.from方法可以将 Set 结构转为数组。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dedupe</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array));</span><br><span class="line">&#125;</span><br><span class="line">dedupe([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>这就提供了去除数组重复成员的另一种方法。</p><h3 id="遍历操作"><a href="#遍历操作" class="headerlink" title="遍历操作"></a>遍历操作</h3><ol><li>Set.prototype.keys()：返回键名的遍历器</li><li>Set.prototype.values()：返回键值的遍历器</li><li>Set.prototype.entries()：返回键值对的遍历器</li><li>Set.prototype.forEach()：使用回调函数遍历每个成员</li></ol><p>需要特别指出的是，Set的遍历顺序就是插入顺序。这个特性有时非常有用，比如使用 Set 保存一个回调函数列表，调用时就能保证按照添加顺序调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set(['red', 'green', 'blue']);</span><br><span class="line"></span><br><span class="line">for (let item of <span class="keyword">set</span>.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">set</span>.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">set</span>.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ["red", "red"]</span></span><br><span class="line"><span class="comment">// ["green", "green"]</span></span><br><span class="line"><span class="comment">// ["blue", "blue"]</span></span><br></pre></td></tr></table></figure><p>上面代码中，entries方法返回的遍历器，同时包括键名和键值，所以每次输出一个数组，它的两个成员完全相等。</p><p>Set 结构的实例默认可遍历，它的默认遍历器生成函数就是它的values方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>.prototype[<span class="built_in">Symbol</span>.iterator] === <span class="built_in">Set</span>.prototype.values</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这意味着，可以省略values方法，直接用for…of循环遍历 Set。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set(['red', 'green', 'blue']);</span><br><span class="line"></span><br><span class="line">for (let x of <span class="keyword">set</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
          <category> Set </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的基础使用</title>
      <link href="/2019/09/07/git%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/09/07/git%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<ul><li>本文介绍了git的基础命令，以及工作过程中如何使用git<a id="more"></a></li></ul><h3 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h3><blockquote><p>git config –global user.name <name><br>git config –global user.email <email></email></name></p></blockquote><h3 id="检查配置"><a href="#检查配置" class="headerlink" title="检查配置"></a>检查配置</h3><blockquote><p>git config –list</p></blockquote><h3 id="获取Git仓库"><a href="#获取Git仓库" class="headerlink" title="获取Git仓库"></a>获取Git仓库</h3><ol><li>目录初始化:  git init</li><li>克隆现有仓库:  git clone <url></url></li></ol><h3 id="删除仓库内容"><a href="#删除仓库内容" class="headerlink" title="删除仓库内容"></a>删除仓库内容</h3><ol><li>在本地仓库删除指定文件： git rm 文件名称</li><li>在本地仓库删除指定文件： git rm -r 文件夹名称</li><li>提交修改： git commit -m “”</li><li>推送到远程仓库： git push</li></ol><p>三个工作区域：工作目录，暂存区域，Git仓库</p><p>已快照的形式存储</p><p>Git更新状态命令</p><p>追踪文件与暂存已经修改文件  git add .<br>提交更新  git commit -m “第一次提交”<br>查看状态  git status<br>比较工作目录和暂存区域   git diff<br>比较暂存区域和上版本的区别 git diff –staged<br>比较工作目录和上版本的区别 git diff HEAD</p><p>查看提交历史 git log</p><p>Git撤销<br>撤销到暂存  git reser HEAD –<file><br>撤销暂存   git checkout –<file></file></file></p><p>Git分支：指针<br>默认分支 master<br>创建分支 git branch <name></name></p><p>HEAD 指针<br>切换分支 git checkout &lt;名字&gt;</p><h3 id="工作中使用分支：不要在主分支上修改代码"><a href="#工作中使用分支：不要在主分支上修改代码" class="headerlink" title="工作中使用分支：不要在主分支上修改代码"></a>工作中使用分支：不要在主分支上修改代码</h3><p>合并分支（切换到主分支） git merge &lt;分支&gt;</p><p>以本地仓库为基准</p><ol><li>创建一个新的仓库</li><li>与git仓库创建连接：git remote add origin <url></url></li><li>提交本地origin分支到远程master分支上：git push origin master</li><li>提交简写(下次提交直接git push 就可以)： git push -u origin master</li><li>查看所有版本：git branch -v</li></ol><p>以远程仓库为基准</p><blockquote><p>git clone url</p></blockquote><p>多人协作<br>拉取：git fetch <name><br>合并：git merge <branch><br>拉取加合并：git pull <name> <branch><br>推送：git push <name> <branch></branch></name></branch></name></branch></name></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
          <category> git基础使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios的基础使用</title>
      <link href="/2019/09/02/axios%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/09/02/axios%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<ul><li>本文介绍了axios的基础使用<a id="more"></a></li></ul><h3 id="npm下载"><a href="#npm下载" class="headerlink" title="npm下载"></a>npm下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure><h3 id="引入axios"><a href="#引入axios" class="headerlink" title="引入axios"></a>引入axios</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br></pre></td></tr></table></figure><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><h3 id="通过axios-post-发送一个数据"><a href="#通过axios-post-发送一个数据" class="headerlink" title="通过axios.post()发送一个数据"></a>通过axios.post()发送一个数据</h3><ul><li>第一个参数填请求的地址</li><li>第二个参数填请求头（对象的形式，也可以不写）</li><li>第三个参数填要传的数据</li><li>发送完请求会返回一个promise对象，可以通过.then()执行回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">"https://myapp-92091.firebaseio.com/user.json"</span>)</span><br><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line">.then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;,(err)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="get请求使用方式一样"><a href="#get请求使用方式一样" class="headerlink" title="get请求使用方式一样"></a>get请求使用方式一样</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">"https://myapp-92091.firebaseio.com/user.json"</span>)</span><br><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line">.then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 数据处理</span></span><br><span class="line">&#125;,(err)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Config-Defaults"><a href="#Config-Defaults" class="headerlink" title="Config Defaults"></a>Config Defaults</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.buseURL = <span class="string">"https://myapp-92091.firebaseio.com"</span></span><br><span class="line"><span class="comment">// 配置请求头（get，post，common）</span></span><br><span class="line">axios.defaults.header.common[<span class="string">"Authorization"</span>] = <span class="string">"AUTH_TOKEN"</span></span><br></pre></td></tr></table></figure><h3 id="Interceptors"><a href="#Interceptors" class="headerlink" title="Interceptors"></a>Interceptors</h3><ul><li>可以在处理请求或响应之前拦截它们。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加一个发送数据前的拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在发送请求处理数据，也可以加loading</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, error =&gt; &#123;</span><br><span class="line">    <span class="comment">// 处理请求错误</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个请求数据回来的拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 数据处理</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 处理响应错误</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>也可以创建一个新的axios实例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.create()</span><br><span class="line">instance.defaults.baseURL = <span class="string">""</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> vue基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex状态管理</title>
      <link href="/2019/08/30/Vuex%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
      <url>/2019/08/30/Vuex%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<ul><li>本文介绍了Vuex的基础使用<a id="more"></a><h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3></li></ul><ol><li>可以通过npm下载</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><ol start="2"><li>通过vue-cli直接创建</li></ol><hr><h3 id="二、如何使用"><a href="#二、如何使用" class="headerlink" title="二、如何使用"></a>二、如何使用</h3><ul><li>创建Vuex实例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">"vuex"</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>在任意组件通过计算属性computed获取数据，当数据改变时会立即更新</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    count()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="三、特性"><a href="#三、特性" class="headerlink" title="三、特性"></a>三、特性</h3><h4 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h4><ul><li>当数据需要处理的时候，使用getters</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">    <span class="comment">// 需要传入state，获取数据</span></span><br><span class="line">        doubleCount(state)&#123;</span><br><span class="line">            <span class="keyword">return</span> state.count * <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>使用方式跟state的方式一样</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">       count()&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.$stroe.getters.doubleCount</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><ul><li>更改Vuex的store中的状态的唯一方法是提交mutation。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        increaseCount(state， num)&#123;</span><br><span class="line">            state.count += num</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>使用的时候需要使用$store.commit()方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">        count()&#123;</span><br><span class="line">        <span class="comment">// 执行increment方法</span></span><br><span class="line">            <span class="keyword">this</span>.$store.commit(<span class="string">"increaseCount"</span>， <span class="number">10</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过监听mutations（函数执行）的方式，可以追踪到当前数据的变化。</li><li>注意：mutations只能监听到同步的代码。</li></ul><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><ul><li>Action 类似于 mutation，不同在于：Action 提交的是 mutation，而不是直接变更状态。Action 可以包含任意异步操作。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increaseCount(state， num)&#123;</span><br><span class="line">        state.count += num</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  <span class="comment">//Action函数接受一个与store实例具有相同方法和属性的context对象</span></span><br><span class="line">    actionsIncrease(context) &#123;</span><br><span class="line">    <span class="comment">// 1s后执行count+5（注意这里需要使用箭头函数）</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 通过context.commit提交一个mutation</span></span><br><span class="line">            context.commit(<span class="string">'increaseCount'</span>, <span class="number">5</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>使用$store.dispatch()分发actions</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        count()&#123;</span><br><span class="line">        <span class="comment">// 触发actionsIncrease（也可以传值）</span></span><br><span class="line">            <span class="keyword">this</span>.$store.dispatch(<span class="string">"actionsIncrease"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Vue-devtools"><a href="#Vue-devtools" class="headerlink" title="Vue-devtools"></a>Vue-devtools</h4><ul><li>使用devtools进行数据监听</li></ul><hr><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><ol><li>把数据写在state里面，通过计算属性computed监听数据（实时更新）</li><li>获取数据：this.$store.state</li><li>状态改变：必须提交一个mutations，不可以直接操作数据，这样才可以进行数据监听（devtools），并且通过commit的方法只能是同步的代码。</li><li>异步的代码必须写在actions里，通过actions提交一个mutations修改数据的状态。</li></ol><hr><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h4 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h4><h5 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h5><ul><li>为组件创建计算属性以返回 Vuex store 中的状态。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">"vuex"</span></span><br><span class="line">compouted: &#123;</span><br><span class="line"><span class="comment">// 通过mapState获取到count和value的值(函数的形式)</span></span><br><span class="line"><span class="comment">// 相当于count()&#123;return this.$state.count&#125;</span></span><br><span class="line">    ...mapState([<span class="string">"count"</span>, <span class="string">"value"</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h5><ul><li>为组件创建计算属性以返回 getter 的返回值。</li><li>使用方法和mapState一样</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState, mapGetters&#125; <span class="keyword">from</span> <span class="string">"vuex"</span></span><br><span class="line">compouted: &#123;</span><br><span class="line">    ...mapState([<span class="string">"count"</span>]),</span><br><span class="line">    <span class="comment">// 相当于daubleCount()&#123;return this.$getters.daubleCount&#125;</span></span><br><span class="line">    ...mapGetters([<span class="string">"daubleCount"</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="mapActions"><a href="#mapActions" class="headerlink" title="mapActions"></a>mapActions</h5><ul><li>创建组件方法分发 action。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapActions&#125; <span class="keyword">from</span> <span class="string">"vuex"</span></span><br><span class="line">compouted: &#123;</span><br><span class="line"><span class="comment">// 相当于actionsIncrease()&#123;this.$store.dispatch("actionsIncrease")&#125;</span></span><br><span class="line">    ...mapActions([<span class="string">"actionsIncrease"</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果需要传参可以在事件绑定里直接传</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"actionsIncrease(5)"</span>&gt;</span>每次点击加5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h5><ul><li>使用方法和mapActions一样</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapActions, mapMutations&#125; <span class="keyword">from</span> <span class="string">"vuex"</span></span><br><span class="line">compouted: &#123;</span><br><span class="line">    ...mapActions([<span class="string">"actionsIncrease"</span>])，</span><br><span class="line">    ...mapMutations([<span class="string">""</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h4><ul><li>我们通过计算属性computed监听数据的时候不能直接使用v-model进行数据改变。</li><li>所以我们要通过v-bind和@input自己绑定一个事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        value: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        valueGetters(state)&#123;</span><br><span class="line">            <span class="keyword">return</span> state.value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        changeValue(state, num)&#123;</span><br><span class="line">            state.value = num</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="comment">// &#123;commit&#125;是结构赋值的写法</span></span><br><span class="line">        actionsValue(&#123;commit&#125;, num)&#123;</span><br><span class="line">            commit(<span class="string">"changeValue"</span>, num)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 通过$event.target.value获取当前输入的内容</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"valueGetters"</span> @<span class="attr">input</span>=<span class="string">"actionsValue($event.target.value)"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapGetters, mapActions&#125; <span class="keyword">from</span> <span class="string">"vuex"</span></span><br><span class="line">computed: &#123;</span><br><span class="line"><span class="comment">// 通过计算属性监听valueGetters</span></span><br><span class="line">    ...mapGetters([<span class="string">"valueGetters"</span>])</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line"><span class="comment">// 分发actions</span></span><br><span class="line">    ...mapActions([<span class="string">"actionsValue"</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二种方法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"valueGetters"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapGetters, mapActions&#125; <span class="keyword">from</span> <span class="string">"vuex"</span></span><br><span class="line">computed: &#123;</span><br><span class="line">    valueGetters: &#123;</span><br><span class="line">    <span class="comment">// get：获取计算属性应该做什么</span></span><br><span class="line">        <span class="keyword">get</span>()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.valueGetters</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 设置valueGetters</span></span><br><span class="line">        <span class="keyword">set</span>(num)&#123;</span><br><span class="line">            <span class="keyword">this</span>.$store.dispatch(<span class="string">"actionsValue"</span>, num)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line"><span class="comment">// 分发actions</span></span><br><span class="line">    ...mapActions([<span class="string">"actionsValue"</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> vue基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由插件VueRouter</title>
      <link href="/2019/08/29/%E8%B7%AF%E7%94%B1%E6%8F%92%E4%BB%B6VueRouter/"/>
      <url>/2019/08/29/%E8%B7%AF%E7%94%B1%E6%8F%92%E4%BB%B6VueRouter/</url>
      
        <content type="html"><![CDATA[<ul><li>本文介绍了VueRouter的基础使用。</li></ul><a id="more"></a><h2 id="一、基础使用"><a href="#一、基础使用" class="headerlink" title="一、基础使用"></a>一、基础使用</h2><h3 id="如何下载"><a href="#如何下载" class="headerlink" title="如何下载"></a>如何下载</h3><ol><li>可以通过npm下载</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router --save</span><br></pre></td></tr></table></figure><ol start="2"><li>也可以通过vue-cli创建项目的时候直接下载<h3 id="如何使用vueRouter"><a href="#如何使用vueRouter" class="headerlink" title="如何使用vueRouter"></a>如何使用vueRouter</h3></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./App.vue"</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"./components/Home"</span></span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">"./components/User"</span></span><br><span class="line"><span class="comment">// 引入vueRouter</span></span><br><span class="line"><span class="keyword">import</span> vueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span></span><br><span class="line"><span class="comment">// 告诉vue需要使用vueRouter</span></span><br><span class="line">vue.use(vueRouter)</span><br><span class="line"><span class="comment">// 通过new创建一个vueRouter实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> vueRouter(&#123;</span><br><span class="line">    <span class="comment">// 配置路由</span></span><br><span class="line">    routes： [</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">"/"</span>, <span class="attr">component</span>: Home&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">"/user"</span>, <span class="attr">component</span>: User&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    <span class="comment">// 告诉vue我们需要使用哪一个router实例（ES6简写方式）</span></span><br><span class="line">    router,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>通过router-view在temponent模板里替换组件</li><li>一般我们会创建一个router.js文件，把router的配置都写在里面，然后通过export default{ }暴露出来</li></ul><h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><ol><li>hash模式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mode: hash</span><br></pre></td></tr></table></figure><ol start="2"><li>history模式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mode: history</span><br></pre></td></tr></table></figure><h3 id="组件切换"><a href="#组件切换" class="headerlink" title="组件切换"></a>组件切换</h3><ol><li>可以通过a标签进行路由跳转</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>跳转到Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/User"</span>&gt;</span>跳转到User<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这样页面会有跳转行为（刷新页面）</li></ul><ol start="2"><li>vueRouter给我们提供了新的组件（不会进行页面跳转），通过to来进行跳转路由</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// </span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/User"</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>router-link默认渲染成a标签（可以通过tag渲染成li）</li><li>如果想设置选中状态可以通过.router-linkactive设置css样式（”/“是一个模糊的匹配，可以添加关键字exact进行精确匹配）</li><li>如果想更改选中状态的class类名，可以通过active-class=””设置</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">"li"</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">active-class</span>=<span class="string">"active"</span> <span class="attr">exact</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">"li"</span> <span class="attr">to</span>=<span class="string">"/User"</span> <span class="attr">active-class</span>=<span class="string">"active"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>User<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.router-link-active</span>&#123;</span><br><span class="line">    // 样式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>还可以通过js来进行切换</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"goToHome"</span>&gt;</span>跳转到主页<span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    goToHome()&#123;</span><br><span class="line">    <span class="comment">// 通过$router获取当前路由的实例，push方法进行跳转路由</span></span><br><span class="line">        <span class="keyword">this</span>.$router.push(<span class="string">"/"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二、使用router-link与动态路由"><a href="#二、使用router-link与动态路由" class="headerlink" title="二、使用router-link与动态路由"></a>二、使用router-link与动态路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">"/"</span>, <span class="attr">compont</span>: Home&#125;,</span><br><span class="line">        <span class="comment">// 通过：id传值</span></span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">"/user/:id"</span>, <span class="attr">compont</span>: User&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>可以通过$route.params获取到自定义的参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        id: <span class="keyword">this</span>.$route.params.id</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 如果想要动态渲染$router.params的值，需要使用watch监听</span></span><br><span class="line">watch: &#123;</span><br><span class="line">    $route(to, <span class="keyword">from</span>)&#123;</span><br><span class="line">    <span class="comment">// to:切换之后的$route, from：切换之前的$route</span></span><br><span class="line">        <span class="keyword">this</span>.id = to.params</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><ul><li>使用children字段配置，然后在user组件中通过router-view渲染子路由</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">"/"</span>, <span class="attr">compont</span>: Home&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        path: <span class="string">"/user"</span>,</span><br><span class="line">        compont: User,</span><br><span class="line">        children: [&#123;</span><br><span class="line">        <span class="comment">// ""：代表默认显示</span></span><br><span class="line">                path: <span class="string">""</span>,</span><br><span class="line">                component: UserC1</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">                path: <span class="string">":id"</span>,</span><br><span class="line">                component: UserC2</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">                path: <span class="string">":id/edit"</span>,</span><br><span class="line">                component: UserEdit,</span><br><span class="line">                <span class="comment">// </span></span><br><span class="line">                name: <span class="string">"userEdit"</span></span><br><span class="line">        &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>如果路由嵌套很多层，router-link渲染的时候写起来就很麻烦，我们可以通过name关键字设置路径</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">"/user"</span>,</span><br><span class="line">        component: User,</span><br><span class="line">        children: [&#123;</span><br><span class="line">            path: <span class="string">":id"</span>,</span><br><span class="line">            component: UserC2</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            path: <span class="string">":id/edit"</span>,</span><br><span class="line">            component: userEdit,</span><br><span class="line">            name: <span class="string">"userEdit"</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>通过：to传一个对象，设置当前路由</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>User<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'userEdit', params: &#123;id: $route.params.id&#125;&#125;"</span>&gt;</span>跳转到userEdit<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; $route.params.id &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="命名组件"><a href="#命名组件" class="headerlink" title="命名组件"></a>命名组件</h3><ul><li>通过name设置组件是否可见</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"header-top"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">routes: [</span><br><span class="line"><span class="comment">// "/"匹配到两个组件，第一个是Home（加载到没有命名的router-view里）,第二个是Header（加载到header-top）</span></span><br><span class="line">       &#123;<span class="attr">path</span>: <span class="string">"/"</span>, <span class="attr">components</span>: &#123;</span><br><span class="line">       <span class="comment">// 默认显示的组件</span></span><br><span class="line">           <span class="keyword">default</span>: Home，</span><br><span class="line">           <span class="string">"header-top"</span>: Header</span><br><span class="line">       &#125;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><ul><li>当输入一个错误的path时，需要进行重定向</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// "*":所有未定义的路由</span></span><br><span class="line">path: <span class="string">"*"</span></span><br><span class="line"><span class="comment">// 重定向</span></span><br><span class="line">    redirect： err</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、过渡动画"><a href="#三、过渡动画" class="headerlink" title="三、过渡动画"></a>三、过渡动画</h2><ul><li>router-view始终只显示一个组件，因此符合transition的要求（只能加载一个组件），所以可以通过transition包裹router-view达到路由切换时的动画效果</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用钩子函数设置动画</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> vue基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中From表单的使用</title>
      <link href="/2019/08/28/Vue%E4%B8%ADFrom%E8%A1%A8%E5%8D%95%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/28/Vue%E4%B8%ADFrom%E8%A1%A8%E5%8D%95%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<ul><li>本文详细介绍了From表单在Vue中如何使用。<a id="more"></a></li></ul><h3 id="事件绑定原理"><a href="#事件绑定原理" class="headerlink" title="事件绑定原理"></a>事件绑定原理</h3><ul><li>通过v-model进行数据绑定，v-model主要做了两件事情：<ol><li>初始化当前input框里的value</li><li>监听input事件</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"email"</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-model</span>=<span class="string">"userInfo.email"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        userInfo: &#123;</span><br><span class="line">            email: <span class="string">"123@qq.com"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>v-model的默认行为：当输入的时候会立即更新数据（实时更新）， 这样很浪费性能，一般情况下我们只需要在input失去焦点的情况下更新数据。</li><li>可以通过修饰符来实现：<ol><li>失去焦点再进行数据更新：v-model.lazy</li><li>去除前面和后面空格：v-model.trim</li><li>把当前字符串转换成数字：v-midel.number</li></ol></li></ul><hr><h3 id="文本域textarea"><a href="#文本域textarea" class="headerlink" title="文本域textarea"></a>文本域textarea</h3><ul><li>文本域textarea是闭合的标签，但是数据绑定仍然要写在标签上，不可以通过双大括号的形式写在标签里</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"message"</span>&gt;</span>信息<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"message"</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-model</span>=<span class="string">"userInfo.message"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        userInfo: &#123;</span><br><span class="line">            message: <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数据展示：文本域中可以输入回车以及空格，但是把数据渲染成html展现出来的时候会只显示一个空格，所以需要设置css中white-apace的属性，从而改变显示的形式。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"white-apace:pre"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="复选框checkbox"><a href="#复选框checkbox" class="headerlink" title="复选框checkbox"></a>复选框checkbox</h3><ul><li>通过v-model绑定相同的值，表示一组复选框，当勾选的时候，会向数组里push数据，当取消勾选会delete对应的数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sendmail"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"sendEmail"</span> <span class="attr">value</span>=<span class="string">"SendEMail"</span> <span class="attr">v-model</span>=<span class="string">"sendMail"</span>&gt;</span></span><br><span class="line">订阅邮箱</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sendInfomail"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"sendInfomail"</span> <span class="attr">value</span>=<span class="string">"SendInfoMail"</span> <span class="attr">v-model</span>=<span class="string">"sendMail"</span>&gt;</span></span><br><span class="line">订阅短信</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        sendMail: []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数据展示：可以通过v-for，进行数组循环</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in sendMail"</span> <span class="attr">:key</span>=<span class="string">"tiem"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单选框radio"><a href="#单选框radio" class="headerlink" title="单选框radio"></a>单选框radio</h3><ul><li>与复选框相似，通过v-model绑定相同的数据，代表一组单选框</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"Male"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span></span><br><span class="line">男</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">value</span>=<span class="string">"Female"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span></span><br><span class="line">女</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        sex: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下拉菜单option"><a href="#下拉菜单option" class="headerlink" title="下拉菜单option"></a>下拉菜单option</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"priority"</span>&gt;</span>下拉菜单<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"priority"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"item in priorities"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        priorities: [<span class="string">"高"</span>， <span class="string">"中"</span>, <span class="string">"低"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置下拉菜单默认选中</li></ul><ol><li>可以通过设置selected来实现</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"priority"</span>&gt;</span>下拉菜单<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"priority"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"item in priorities"</span> <span class="attr">:key</span>=<span class="string">"item"</span> ：<span class="attr">selected</span>=<span class="string">"item == "</span>中""&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>可以通过v-model绑定默认数据到select上</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"priority"</span>&gt;</span>下拉菜单<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"priority"</span> <span class="attr">v-model</span>=<span class="string">"selectItem"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"item in priorities"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    selectItem: <span class="string">"低"</span></span><br><span class="line">        priorities: [<span class="string">"高"</span>， <span class="string">"中"</span>, <span class="string">"低"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="在自定义组件中使用"><a href="#在自定义组件中使用" class="headerlink" title="在自定义组件中使用"></a>在自定义组件中使用</h3><ul><li>通过组件之间的传值，$emit()、props实现自定义组件</li><li>使用v-model进行数据绑定，主要做了两件事情：<ol><li>初始化当前input框里的value：可以通过v-bind:value实现</li><li>监听input事件：绑定input事件，获取到输入的值$event.target.value</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"name"</span> @<span class="attr">input</span>=<span class="string">"name = $event.target.value"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name: <span class="string">"name"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><ul><li>注意：当我们提交的时候需要阻止按钮默认事件，然后处理数据（发送请求等）。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.prevent</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    submit()&#123;</span><br><span class="line">        <span class="comment">//数据处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> vue基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> From </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客的搭建（一）</title>
      <link href="/2019/08/23/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/08/23/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>折腾了一晚上，终于把博客搭起来了，用的是Hexo框架，基于Node.js，还需要Git仓库管理代码，在这里推荐大家使用GitHub，所以我们需要安装Git、Node.js以及安装Hexo，并且安装到全局。</p><hr><h3 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h3><p>作为IT工作者，相信大家电脑里应该都安装了Git、Node.js，不会安装的小伙伴可以上网搜一下教程。<br>下面我具体说一下Hexo安装以及使用。</p><a id="more"></a><hr><h4 id="使用npm安装Hexo"><a href="#使用npm安装Hexo" class="headerlink" title="使用npm安装Hexo"></a>使用npm安装Hexo</h4><blockquote><p>$ npm install hexo-cli -g</p></blockquote><p>安装完成后通过hexo-v,查看时候安装成功</p><blockquote><p>$ hexo -v</p></blockquote><h4 id="创建资源文件夹"><a href="#创建资源文件夹" class="headerlink" title="创建资源文件夹"></a>创建资源文件夹</h4><p>安装 Hexo 完成后，在你任一目录下新建文件夹命名为Blog（替换成你喜欢的名字），然后cd到Blog文件夹下</p><blockquote><p>$ cd Blog<br>$ hexo init Blog</p></blockquote><p>根目录创建成功后，需要下载依赖的文件</p><blockquote><p>$ npm install</p></blockquote><p>下载完成后即可开始个性化配置。</p><hr><h3 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h3><h4 id="本地预览博客"><a href="#本地预览博客" class="headerlink" title="本地预览博客"></a>本地预览博客</h4><p>通过hexo serve命令，预览当前博客</p><blockquote><p>$ hexo serve</p></blockquote><p>打开浏览器输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，即可预览当前博客</p><h4 id="创建一篇新的博客"><a href="#创建一篇新的博客" class="headerlink" title="创建一篇新的博客"></a>创建一篇新的博客</h4><p>输入hexo new post + name，可以创建一篇新的博客</p><blockquote><p>hexo new post name</p></blockquote><p>在source/_posts文件夹下会生成一个md文件</p><h4 id="创建主页"><a href="#创建主页" class="headerlink" title="创建主页"></a>创建主页</h4><p>同理通过hexo new page + name，可以创建主页</p><hr><h3 id="三、博客发布"><a href="#三、博客发布" class="headerlink" title="三、博客发布"></a>三、博客发布</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>Hexo给我提供了插件，可以方便我们进行git上传</p><blockquote><p>npm install hexo-deployer-git –save</p></blockquote><p>安装完成之后，需要更改跟目录下的_config.yml文件的内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/username/username.github.io.git</span></span><br></pre></td></tr></table></figure><h4 id="生成Html文件"><a href="#生成Html文件" class="headerlink" title="生成Html文件"></a>生成Html文件</h4><p>上传到Github之前，需要把博客系统编译成html</p><blockquote><p>hexo generat</p></blockquote><h4 id="提交到Git仓库"><a href="#提交到Git仓库" class="headerlink" title="提交到Git仓库"></a>提交到Git仓库</h4><blockquote><p>hexo deploy</p></blockquote><h4 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h4><p>在每次使用hexo generat部署之后，可以先使用 hexo serve 运行本地站点，然后在浏览器输入地址 <a href="http://lacolhost:4000/" target="_blank" rel="noopener">http://lacolhost:4000/</a> 查看运行结果，检查无误后再使用 hexo deploy 发布</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag>  Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
